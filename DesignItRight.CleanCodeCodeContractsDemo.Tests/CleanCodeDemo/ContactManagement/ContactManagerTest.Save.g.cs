// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ContactManagerTest.Save.g.cs" company="">
// </copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
// <summary>
//   The contact manager test.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using System.IO.Preparations;

using DesignItRight.Infrastructure.Common;
using DesignItRight.Infrastructure.Common.Logging;
using DesignItRight.Internal.CleanCodeDemo.ContactManagement;
using DesignItRight.Internal.CleanCodeDemo.ContactManagement.Moles;

using Microsoft.Moles.Framework.Moles;
using Microsoft.Pex.Framework.Exceptions;
using Microsoft.Pex.Framework.Generated;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace DesignItRight.CleanCodeDemo.ContactManagement
{
    /// <summary>
    /// The contact manager test.
    /// </summary>
    public partial class ContactManagerTest
    {
        #region -------------------- Public Methods --------------------

        /// <summary>
        /// The save throws trace assertion exception 316.
        /// </summary>
        [TestMethod]
        [PexGeneratedBy(typeof(ContactManagerTest))]
        [ExpectedException(typeof(TraceAssertionException))]
        public void SaveThrowsTraceAssertionException316()
        {
            using (PexTraceListenerContext.Create())
            {
                Logger logger;
                SDummyExampleContactPersistence sDummyExampleContactPersistence;
                ContactManager contactManager;
                OperationResult operationResult;
                TextFileLoggingSink s0 = new TextFileLoggingSink();
                logger = LoggerFactory.Create(s0);
                sDummyExampleContactPersistence =
                    new SDummyExampleContactPersistence((ILogger)logger);
                contactManager = ContactManagerFactory.Create
                    (logger, (IContactPersistence)sDummyExampleContactPersistence);
                operationResult = Save(contactManager, null);
            }
        }

        /// <summary>
        /// The save throws trace assertion exception 78.
        /// </summary>
        [TestMethod]
        [PexGeneratedBy(typeof(ContactManagerTest))]
        [ExpectedException(typeof(TraceAssertionException))]
        public void SaveThrowsTraceAssertionException78()
        {
            using (PexTraceListenerContext.Create())
            {
                Logger logger;
                DummyExampleContactPersistence dummyExampleContactPersistence;
                ContactManager contactManager;
                OperationResult operationResult;
                TextFileLoggingSink s0 = new TextFileLoggingSink();
                logger = LoggerFactory.Create(s0);
                dummyExampleContactPersistence =
                    DummyExampleContactPersistenceFactory.Create(logger);
                contactManager = ContactManagerFactory.Create
                    (logger, dummyExampleContactPersistence);
                operationResult = Save(contactManager, null);
            }
        }

        /// <summary>
        /// The save throws mole not implemented exception 3.
        /// </summary>
        [TestMethod]
        [PexGeneratedBy(typeof(ContactManagerTest))]
        [Ignore]
        [PexDescription("this test requires to run under the Pex profiler in order to reproduce")]
        [ExpectedException(typeof(MoleNotImplementedException))]
        [PexNotReproducible]
        [HostType("Moles")]
        public void SaveThrowsMoleNotImplementedException3()
        {
            Logger logger;
            SDummyExampleContactPersistence sDummyExampleContactPersistence;
            ContactManager contactManager;
            OperationResult operationResult;
            TextFileLoggingSink s0 = new TextFileLoggingSink();
            logger = LoggerFactory.Create(s0);
            sDummyExampleContactPersistence =
                new SDummyExampleContactPersistence((ILogger)logger);
            contactManager = ContactManagerFactory.Create
                (logger, (IContactPersistence)sDummyExampleContactPersistence);
            FileStreamPreparation.Prepare();
            Contact s1 = new Contact();
            s1.FirstName = null;
            s1.MiddleName = null;
            s1.LastName = null;
            s1.PhoneNumber = null;
            operationResult = Save(contactManager, s1);
        }

        #endregion
    }
}