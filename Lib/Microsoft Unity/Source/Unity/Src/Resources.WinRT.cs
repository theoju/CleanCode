
// This output was generated based on a format similar to the one used by resx resource generation.
namespace Microsoft.Practices.Unity.Properties
{
    using System;


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like or ResGen Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources
    {

        private static global::Windows.ApplicationModel.Resources.ResourceLoader resourceMan;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::Windows.ApplicationModel.Resources.ResourceLoader ResourceManager
        {
            get
            {
                if (object.ReferenceEquals(resourceMan, null))
                {
                    global::Windows.ApplicationModel.Resources.ResourceLoader temp = new global::Windows.ApplicationModel.Resources.ResourceLoader("Microsoft.Practices.Unity.WinRT/Resources");
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
		
		/// <summary>
		/// The type {0} has multiple constructors of length {1}. Unable to disambig...
		/// </summary>
        internal static string AmbiguousInjectionConstructor
        {
            get
            {
                return ResourceManager.GetString("AmbiguousInjectionConstructor");
            }
        }
	
		/// <summary>
		/// The provided string argument must not be empty.
		/// </summary>
        internal static string ArgumentMustNotBeEmpty
        {
            get
            {
                return ResourceManager.GetString("ArgumentMustNotBeEmpty");
            }
        }
	
		/// <summary>
		/// The current build operation (build key {2}) failed: {3} (Strategy type {...
		/// </summary>
        internal static string BuildFailedException
        {
            get
            {
                return ResourceManager.GetString("BuildFailedException");
            }
        }
	
		/// <summary>
		/// The current type {0} is an interface and cannot be constructed. Are you ...
		/// </summary>
        internal static string CannotConstructInterface
        {
            get
            {
                return ResourceManager.GetString("CannotConstructInterface");
            }
        }
	
		/// <summary>
		/// Cannot extract type from build key {0}.
		/// </summary>
        internal static string CannotExtractTypeFromBuildKey
        {
            get
            {
                return ResourceManager.GetString("CannotExtractTypeFromBuildKey");
            }
        }
	
		/// <summary>
		/// The method {0}.{1}({2}) is an open generic method. Open generic methods ...
		/// </summary>
        internal static string CannotInjectGenericMethod
        {
            get
            {
                return ResourceManager.GetString("CannotInjectGenericMethod");
            }
        }
	
		/// <summary>
		/// The property {0} on type {1} is an indexer. Indexed properties cannot be...
		/// </summary>
        internal static string CannotInjectIndexer
        {
            get
            {
                return ResourceManager.GetString("CannotInjectIndexer");
            }
        }
	
		/// <summary>
		/// The method {1} on type {0} has an out parameter. Injection cannot be per...
		/// </summary>
        internal static string CannotInjectMethodWithOutParam
        {
            get
            {
                return ResourceManager.GetString("CannotInjectMethodWithOutParam");
            }
        }
	
		/// <summary>
		/// The method {0}.{1}({2}) has at least one out parameter. Methods with out...
		/// </summary>
        internal static string CannotInjectMethodWithOutParams
        {
            get
            {
                return ResourceManager.GetString("CannotInjectMethodWithOutParams");
            }
        }
	
		/// <summary>
		/// The method {0}.{1}({2}) has at least one ref parameter.Methods with ref ...
		/// </summary>
        internal static string CannotInjectMethodWithRefParams
        {
            get
            {
                return ResourceManager.GetString("CannotInjectMethodWithRefParams");
            }
        }
	
		/// <summary>
		/// The method {1} on type {0} is marked for injection but it is an open gen...
		/// </summary>
        internal static string CannotInjectOpenGenericMethod
        {
            get
            {
                return ResourceManager.GetString("CannotInjectOpenGenericMethod");
            }
        }
	
		/// <summary>
		/// The method {0}.{1}({2}) is static. Static methods cannot be injected.
		/// </summary>
        internal static string CannotInjectStaticMethod
        {
            get
            {
                return ResourceManager.GetString("CannotInjectStaticMethod");
            }
        }
	
		/// <summary>
		/// The type {0} is an open generic type. An open generic type cannot be res...
		/// </summary>
        internal static string CannotResolveOpenGenericType
        {
            get
            {
                return ResourceManager.GetString("CannotResolveOpenGenericType");
            }
        }
	
		/// <summary>
		/// Resolving parameter &quot;{0}&quot; of constructor {1}
		/// </summary>
        internal static string ConstructorArgumentResolveOperation
        {
            get
            {
                return ResourceManager.GetString("ConstructorArgumentResolveOperation");
            }
        }
	
		/// <summary>
		/// The parameter {0} could not be resolved when attempting to call construc...
		/// </summary>
        internal static string ConstructorParameterResolutionFailed
        {
            get
            {
                return ResourceManager.GetString("ConstructorParameterResolutionFailed");
            }
        }
	
		/// <summary>
		/// Parameter type inference does not work for null values. Indicate the par...
		/// </summary>
        internal static string ExceptionNullParameterValue
        {
            get
            {
                return ResourceManager.GetString("ExceptionNullParameterValue");
            }
        }
	
		/// <summary>
		/// Calling constructor {0}
		/// </summary>
        internal static string InvokingConstructorOperation
        {
            get
            {
                return ResourceManager.GetString("InvokingConstructorOperation");
            }
        }
	
		/// <summary>
		/// Calling method {0}.{1}
		/// </summary>
        internal static string InvokingMethodOperation
        {
            get
            {
                return ResourceManager.GetString("InvokingMethodOperation");
            }
        }
	
		/// <summary>
		/// An item with the given key is already present in the dictionary.
		/// </summary>
        internal static string KeyAlreadyPresent
        {
            get
            {
                return ResourceManager.GetString("KeyAlreadyPresent");
            }
        }
	
		/// <summary>
		/// The lifetime manager is already registered. Lifetime managers cannot be ...
		/// </summary>
        internal static string LifetimeManagerInUse
        {
            get
            {
                return ResourceManager.GetString("LifetimeManagerInUse");
            }
        }
	
		/// <summary>
		/// The override marker build plan policy has been invoked. This should neve...
		/// </summary>
        internal static string MarkerBuildPlanInvoked
        {
            get
            {
                return ResourceManager.GetString("MarkerBuildPlanInvoked");
            }
        }
	
		/// <summary>
		/// Resolving parameter &quot;{0}&quot; of method {1}.{2}
		/// </summary>
        internal static string MethodArgumentResolveOperation
        {
            get
            {
                return ResourceManager.GetString("MethodArgumentResolveOperation");
            }
        }
	
		/// <summary>
		/// The value for parameter &quot;{1}&quot; of method {0} could not be resol...
		/// </summary>
        internal static string MethodParameterResolutionFailed
        {
            get
            {
                return ResourceManager.GetString("MethodParameterResolutionFailed");
            }
        }
	
		/// <summary>
		/// Could not resolve dependency for build key {0}.
		/// </summary>
        internal static string MissingDependency
        {
            get
            {
                return ResourceManager.GetString("MissingDependency");
            }
        }
	
		/// <summary>
		/// The type {0} has multiple constructors marked with the InjectionConstruc...
		/// </summary>
        internal static string MultipleInjectionConstructors
        {
            get
            {
                return ResourceManager.GetString("MultipleInjectionConstructors");
            }
        }
	
		/// <summary>
		/// The supplied type {0} must be an open generic type.
		/// </summary>
        internal static string MustHaveOpenGenericType
        {
            get
            {
                return ResourceManager.GetString("MustHaveOpenGenericType");
            }
        }
	
		/// <summary>
		/// The supplied type {0} does not have the same number of generic arguments...
		/// </summary>
        internal static string MustHaveSameNumberOfGenericArguments
        {
            get
            {
                return ResourceManager.GetString("MustHaveSameNumberOfGenericArguments");
            }
        }
	
		/// <summary>
		/// The type {0} does not have an accessible constructor.
		/// </summary>
        internal static string NoConstructorFound
        {
            get
            {
                return ResourceManager.GetString("NoConstructorFound");
            }
        }
	
		/// <summary>
		/// The type {0} does not have a generic argument named &quot;{1}&quot;
		/// </summary>
        internal static string NoMatchingGenericArgument
        {
            get
            {
                return ResourceManager.GetString("NoMatchingGenericArgument");
            }
        }
	
		/// <summary>
		/// while resolving
		/// </summary>
        internal static string NoOperationExceptionReason
        {
            get
            {
                return ResourceManager.GetString("NoOperationExceptionReason");
            }
        }
	
		/// <summary>
		/// The type {0} does not have a constructor that takes the parameters ({1}).
		/// </summary>
        internal static string NoSuchConstructor
        {
            get
            {
                return ResourceManager.GetString("NoSuchConstructor");
            }
        }
	
		/// <summary>
		/// The type {0} does not have a public method named {1} that takes the para...
		/// </summary>
        internal static string NoSuchMethod
        {
            get
            {
                return ResourceManager.GetString("NoSuchMethod");
            }
        }
	
		/// <summary>
		/// The type {0} does not contain an instance property named {1}.
		/// </summary>
        internal static string NoSuchProperty
        {
            get
            {
                return ResourceManager.GetString("NoSuchProperty");
            }
        }
	
		/// <summary>
		/// The type {0} is not a generic type and you are attempting to inject a ge...
		/// </summary>
        internal static string NotAGenericType
        {
            get
            {
                return ResourceManager.GetString("NotAGenericType");
            }
        }
	
		/// <summary>
		/// The type {0} is not an array type with rank 1 and you are attempting to ...
		/// </summary>
        internal static string NotAnArrayTypeWithRankOne
        {
            get
            {
                return ResourceManager.GetString("NotAnArrayTypeWithRankOne");
            }
        }
	
		/// <summary>
		/// Optional dependencies must be reference types. The type {0} is a value t...
		/// </summary>
        internal static string OptionalDependenciesMustBeReferenceTypes
        {
            get
            {
                return ResourceManager.GetString("OptionalDependenciesMustBeReferenceTypes");
            }
        }
	
		/// <summary>
		/// The property {0} on type {1} is not settable.
		/// </summary>
        internal static string PropertyNotSettable
        {
            get
            {
                return ResourceManager.GetString("PropertyNotSettable");
            }
        }
	
		/// <summary>
		/// The property {0} on type {1} is of type {2} and cannot be injected with ...
		/// </summary>
        internal static string PropertyTypeMismatch
        {
            get
            {
                return ResourceManager.GetString("PropertyTypeMismatch");
            }
        }
	
		/// <summary>
		/// The value for the property &quot;{0}&quot; could not be resolved.
		/// </summary>
        internal static string PropertyValueResolutionFailed
        {
            get
            {
                return ResourceManager.GetString("PropertyValueResolutionFailed");
            }
        }
	
		/// <summary>
		/// The provided string argument must not be empty.
		/// </summary>
        internal static string ProvidedStringArgMustNotBeEmpty
        {
            get
            {
                return ResourceManager.GetString("ProvidedStringArgMustNotBeEmpty");
            }
        }
	
		/// <summary>
		/// Resolution of the dependency failed type = &quot;{0}&quot; name = &quot;...
		/// </summary>
        internal static string ResolutionFailed
        {
            get
            {
                return ResourceManager.GetString("ResolutionFailed");
            }
        }
	
		/// <summary>
		/// Resolving {0}{1}
		/// </summary>
        internal static string ResolutionTraceDetail
        {
            get
            {
                return ResourceManager.GetString("ResolutionTraceDetail");
            }
        }
	
		/// <summary>
		/// Resolving {0}{1} (mapped from {2} {3})
		/// </summary>
        internal static string ResolutionWithMappingTraceDetail
        {
            get
            {
                return ResourceManager.GetString("ResolutionWithMappingTraceDetail");
            }
        }
	
		/// <summary>
		/// Resolving value for property {0}.{1}
		/// </summary>
        internal static string ResolvingPropertyValueOperation
        {
            get
            {
                return ResourceManager.GetString("ResolvingPropertyValueOperation");
            }
        }
	
		/// <summary>
		/// The constructor {1} selected for type {0} has ref or out parameters. Suc...
		/// </summary>
        internal static string SelectedConstructorHasRefParameters
        {
            get
            {
                return ResourceManager.GetString("SelectedConstructorHasRefParameters");
            }
        }
	
		/// <summary>
		/// Setting value for property {0}.{1}
		/// </summary>
        internal static string SettingPropertyOperation
        {
            get
            {
                return ResourceManager.GetString("SettingPropertyOperation");
            }
        }
	
		/// <summary>
		/// The type {0} cannot be constructed. You must configure the container to ...
		/// </summary>
        internal static string TypeIsNotConstructable
        {
            get
            {
                return ResourceManager.GetString("TypeIsNotConstructable");
            }
        }
	
		/// <summary>
		/// The type {1} cannot be assigned to variables of type {0}.
		/// </summary>
        internal static string TypesAreNotAssignable
        {
            get
            {
                return ResourceManager.GetString("TypesAreNotAssignable");
            }
        }
	
		/// <summary>
		/// &lt;unknown&gt;
		/// </summary>
        internal static string UnknownType
        {
            get
            {
                return ResourceManager.GetString("UnknownType");
            }
        }
	}
}

